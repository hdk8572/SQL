SET SERVEROUTPUT ON;
SET SERVEROUTPUT OFF;

BEGIN
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
    DBMS_OUTPUT.PUT_LINE('HELLO WORLD2');
    DBMS_OUTPUT.PUT('HELLO WORLD23');
    DBMS_OUTPUT.PUT('HELLO WORLD23');
    DBMS_OUTPUT.PUT_LINE('');
END;
/

DECLARE

EMP_ID NUMBER;
EMP_NAME VARCHAR2(30);

BEGIN

EMP_ID := 888;
EMP_NAME := '배장남';
DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);

END;
/
--

DECLARE
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY
    INTO EMP_ID, EMP_NAME, SALARY
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('SALARY : ' || SALARY);
END;
/
----------------------------------------------

DECLARE
    E EMPLOYEE%ROWTYPE;
BEGIN
    SELECT * INTO E
    FROM EMPLOYEE
    WHERE EMP_NO = '&EMP_NO';
    DBMS_OUTPUT.PUT_LINE('EMP_ID : ' || E.EMP_ID);
    DBMS_OUTPUT.PUT_LINE('EMP_NAME : ' || E.EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('EMP_NO : ' || E.EMP_NO);
    DBMS_OUTPUT.PUT_LINE('SALARY : ' || E.SALARY);
    DBMS_OUTPUT.PUT_LINE('EMAIL : ' || E.EMAIL);
END;
/

DECLARE
    EMP_ID EMPLOYEE.EMP_ID%TYPE;
    EMP_NAME EMPLOYEE.EMP_NAME%TYPE;
    SALARY EMPLOYEE.SALARY%TYPE;
    BONUS EMPLOYEE.BONUS%TYPE;
BEGIN
    SELECT EMP_ID, EMP_NAME, SALARY, NVL(BONUS, 0)
    INTO EMP_ID, EMP_NAME, SALARY, BONUS
    FROM EMPLOYEE
    WHERE EMP_ID = '&EMP_ID';
    
    DBMS_OUTPUT.PUT_LINE('사번 : '||EMP_ID);
    DBMS_OUTPUT.PUT_LINE('이름 : '||EMP_NAME);
    DBMS_OUTPUT.PUT_LINE('급여 : '||SALARY);
    
    IF(BONUS=0)
        THEN DBMS_OUTPUT.PUT_LINE('보너스를 지급받지 않는 사원입니다.');
    END IF;
    DBMS_OUTPUT.PUT_LINE('보너스율 :'||BONUS*100||'%');
END;
/

BEGIN
    FOR N IN (SELECT EMP_NAME FROM EMPLOYEE) LOOP
        DBMS_OUTPUT.PUT_LINE(N);
    END LOOP;
END;
/

DECLARE
    DUP_EMPNO EXCEPTION;
    PRAGMA EXCEPTION_INIT(DUP_EMPNO, -00001);
    
BEGIN
    UPDATE EMPLOYEE
    SET EMP_ID='&사번'
    WHERE EMP_ID=200;
EXCEPTION
    WHEN DUP_EMPNO
    THEN DBMS_OUTPUT.PUT_LINE('이미 존재하는 사번입니다.');
END;
/

-- PROCEDURE 만들기
-- 사원번호를 전달받아서 이름, 급여, 업무를 반환함.
CREATE OR REPLACE PROCEDURE PRO_EMP_ARG_TEST
        (ARG_EMPNO IN EMP.EMPNO%TYPE
        ,ARG_ENAME OUT EMP.ENAME%TYPE
        ,ARG_SAL OUT EMP.SAL%TYPE
        ,ARG_JOB OUT EMP.JOB%TYPE
        )
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('ARG_ENAME : '||ARG_EMPNO);
    SELECT ENAME, SAL, JOB
    INTO  ARG_ENAME, ARG_SAL, ARG_JOB
    FROM EMP
    WHERE EMPNO=ARG_EMPNO;
    
    DBMS_OUTPUT.PUT_LINE('ARG_ENAME : '||ARG_ENAME);
    -- PROCEDURE 는 RETURN 없음. - 대신 매개변수에 IN/OUT를 성정해서 OUT로 설정하면 그것이 RETURN
    -- FUNCTION에는 RETURN 있음.
END;
/
-- 바인드 변수 선언
VARIABLE VAR_ENAME VARCHAR2(30);
VARIABLE VAR_SAL VARCHAR2(30);
VARIABLE VAR_JOB VARCHAR2(30);
-- PROCEDURE 실행
EXEC PRO_EMP_ARG_TEST(7788, :VAR_ENAME, :VAR_SAL, :VAR_JOB);
-- 출력
PRINT VAR_ENAME
PRINT VAR_SAL
PRINT VAR_JOB
 